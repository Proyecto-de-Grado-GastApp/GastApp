// <auto-generated />
using System;
using GastAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GastAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250504233102_Inicial")]
    partial class Inicial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GastAPI.Models.Categoria", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_categorias");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("descripcion");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nombre_categoria");

                    b.HasKey("Id");

                    b.ToTable("categorias", (string)null);
                });

            modelBuilder.Entity("GastAPI.Models.EtiquetaGasto", b =>
                {
                    b.Property<long>("EtiquetaId")
                        .HasColumnType("bigint");

                    b.Property<long>("GastoId")
                        .HasColumnType("bigint");

                    b.Property<long>("EtiquetaPersonalizadaId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("EtiquetaId", "GastoId");

                    b.HasIndex("EtiquetaPersonalizadaId");

                    b.HasIndex("GastoId");

                    b.ToTable("etiquetas_gasto", (string)null);
                });

            modelBuilder.Entity("GastAPI.Models.EtiquetaPersonalizada", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<long?>("UsuarioId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("etiquetas_personalizadas", (string)null);
                });

            modelBuilder.Entity("GastAPI.Models.Gasto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<decimal>("Cantidad")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long?>("CategoriaId")
                        .HasColumnType("bigint");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Frecuencia")
                        .HasColumnType("integer");

                    b.Property<long?>("MetodoPagoId")
                        .HasColumnType("bigint");

                    b.Property<string>("Nota")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("Notificar")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<long>("UsuarioId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("MetodoPagoId");

                    b.HasIndex("UsuarioId", "Fecha");

                    b.ToTable("gastos", (string)null);
                });

            modelBuilder.Entity("GastAPI.Models.HistorialCambio", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("descripcion_cambio");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaCambio")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("GastoId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UsuarioId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("GastoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("historial_de_cambios", (string)null);
                });

            modelBuilder.Entity("GastAPI.Models.MetodoPago", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NombreMetodo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("metodos_de_pago", (string)null);
                });

            modelBuilder.Entity("GastAPI.Models.Presupuesto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Cantidad")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("CategoriaId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaFin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UsuarioId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("UsuarioId", "FechaInicio");

                    b.ToTable("presupuestos", (string)null);
                });

            modelBuilder.Entity("GastAPI.Models.RecordatorioPago", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaRecordatorio")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("GastoId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("Notificado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<long?>("UsuarioId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("GastoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("recordatorios_de_pago", (string)null);
                });

            modelBuilder.Entity("GastAPI.Models.Usuario", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Contrasena")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("usuarios", (string)null);
                });

            modelBuilder.Entity("GastAPI.Models.EtiquetaGasto", b =>
                {
                    b.HasOne("GastAPI.Models.EtiquetaPersonalizada", "EtiquetaPersonalizada")
                        .WithMany("GastosEtiquetados")
                        .HasForeignKey("EtiquetaPersonalizadaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GastAPI.Models.Gasto", "Gasto")
                        .WithMany("Etiquetas")
                        .HasForeignKey("GastoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EtiquetaPersonalizada");

                    b.Navigation("Gasto");
                });

            modelBuilder.Entity("GastAPI.Models.EtiquetaPersonalizada", b =>
                {
                    b.HasOne("GastAPI.Models.Usuario", "Usuario")
                        .WithMany("EtiquetasPersonalizadas")
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("GastAPI.Models.Gasto", b =>
                {
                    b.HasOne("GastAPI.Models.Categoria", "Categoria")
                        .WithMany("Gastos")
                        .HasForeignKey("CategoriaId");

                    b.HasOne("GastAPI.Models.MetodoPago", "MetodoPago")
                        .WithMany("Gastos")
                        .HasForeignKey("MetodoPagoId");

                    b.HasOne("GastAPI.Models.Usuario", "Usuario")
                        .WithMany("Gastos")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");

                    b.Navigation("MetodoPago");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("GastAPI.Models.HistorialCambio", b =>
                {
                    b.HasOne("GastAPI.Models.Gasto", "Gasto")
                        .WithMany("HistorialCambios")
                        .HasForeignKey("GastoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GastAPI.Models.Usuario", null)
                        .WithMany("Historiales")
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Gasto");
                });

            modelBuilder.Entity("GastAPI.Models.Presupuesto", b =>
                {
                    b.HasOne("GastAPI.Models.Categoria", "Categoria")
                        .WithMany("Presupuestos")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GastAPI.Models.Usuario", "Usuario")
                        .WithMany("Presupuestos")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("GastAPI.Models.RecordatorioPago", b =>
                {
                    b.HasOne("GastAPI.Models.Gasto", "Gasto")
                        .WithMany("Recordatorios")
                        .HasForeignKey("GastoId");

                    b.HasOne("GastAPI.Models.Usuario", null)
                        .WithMany("Recordatorios")
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Gasto");
                });

            modelBuilder.Entity("GastAPI.Models.Categoria", b =>
                {
                    b.Navigation("Gastos");

                    b.Navigation("Presupuestos");
                });

            modelBuilder.Entity("GastAPI.Models.EtiquetaPersonalizada", b =>
                {
                    b.Navigation("GastosEtiquetados");
                });

            modelBuilder.Entity("GastAPI.Models.Gasto", b =>
                {
                    b.Navigation("Etiquetas");

                    b.Navigation("HistorialCambios");

                    b.Navigation("Recordatorios");
                });

            modelBuilder.Entity("GastAPI.Models.MetodoPago", b =>
                {
                    b.Navigation("Gastos");
                });

            modelBuilder.Entity("GastAPI.Models.Usuario", b =>
                {
                    b.Navigation("EtiquetasPersonalizadas");

                    b.Navigation("Gastos");

                    b.Navigation("Historiales");

                    b.Navigation("Presupuestos");

                    b.Navigation("Recordatorios");
                });
#pragma warning restore 612, 618
        }
    }
}
